package microcyclerepo

import (
	"math"
	"testing"

	"github.com/jcocozza/cassidy-wails/internal/database"
	"github.com/jcocozza/cassidy-wails/internal/model"
	"github.com/jcocozza/cassidy-wails/internal/utils"
	"github.com/jcocozza/cassidy-wails/internal/utils/dateutil"
	"github.com/jcocozza/cassidy-wails/internal/utils/measurement"
)

var mc = &model.Microcycle{StartDate: "2024-01-01", EndDate: "2024-01-05", CycleActivities: &model.Cycle{&model.ActivityList{DateObject: &dateutil.DateObject{DayOfWeek: "Monday", Date: "2024-01-01"}, ActivityList: []*model.Activity{&model.Activity{Uuid: "c6d91576-b65a-11ee-8546-325096b39f22", Date: "2024-01-01", Order: 1, Name: "Workout Name", Description: "Workout Description", Notes: "Notes", Type: &model.ActivityType{Id: 1, Name: "Run"}, TypeSubtypeList: []*model.ActivityTypeSubtype{}, EquipmentList: []*model.ActivityEquipment{}, Planned: &model.Planned{ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f22", Distance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}}, Completed: &model.Completed{ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f22", Distance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}}}, &model.Activity{Uuid: "c6d91bf2-b65a-11ee-a67e-325096b39f50", Date: "2024-01-01", Order: 2, Name: "Workout Name", Description: "Workout Description", Notes: "Notes", Type: &model.ActivityType{Id: 1, Name: "Run"}, TypeSubtypeList: []*model.ActivityTypeSubtype{}, EquipmentList: []*model.ActivityEquipment{}, Planned: &model.Planned{ActivityUuid: "c6d91bf2-b65a-11ee-a67e-325096b39f50", Distance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}}, Completed: &model.Completed{ActivityUuid: "c6d91bf2-b65a-11ee-a67e-325096b39f50", Distance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}}}, &model.Activity{Uuid: "c6d91576-b65a-11ee-8546-325096b39f47", Date: "2024-01-01", Order: 3, Name: "Workout Name", Description: "Workout Description", Notes: "Notes", Type: &model.ActivityType{Id: 1, Name: "Run"}, TypeSubtypeList: []*model.ActivityTypeSubtype{&model.ActivityTypeSubtype{Id: 1, ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f47", ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, ActivitySubtype: &model.ActivitySubtype{Id: 1, SuperTypeId: 1, Name: "Long"}}, &model.ActivityTypeSubtype{Id: 2, ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f47", ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, ActivitySubtype: &model.ActivitySubtype{Id: 2, SuperTypeId: 1, Name: "Fartlek"}}, &model.ActivityTypeSubtype{Id: 3, ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f47", ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, ActivitySubtype: &model.ActivitySubtype{Id: 3, SuperTypeId: 1, Name: "Tempo"}}}, EquipmentList: []*model.ActivityEquipment{&model.ActivityEquipment{Id: 1, ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f47", Equipment: &model.Equipment{Id: 1, UserUuid: "d4e0fbfe-c945-11ee-b8e2-325096b39f47", EquipmentType: &model.EquipmentType{Id: 1, Name: "Shoes"}, Name: "Kickers 1", Brand: "Hoka", Model: "Clifton 5", Cost: 120, Size: "12.5", PurchaseDate: "2024-01-01", Notes: "Notes", Mileage: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 346013.95999999996}}, AssignedMileage: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 8046.72}}, &model.ActivityEquipment{Id: 2, ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f47", Equipment: &model.Equipment{Id: 2, UserUuid: "d4e0fbfe-c945-11ee-b8e2-325096b39f47", EquipmentType: &model.EquipmentType{Id: 1, Name: "Shoes"}, Name: "Kickers 2", Brand: "Saucony", Model: "Kinvara 20", Cost: 75, Size: "13", PurchaseDate: "2023-05-04", Notes: "Notes", Mileage: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 8051.72}}, AssignedMileage: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 8046.72}}}, Planned: &model.Planned{ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f47", Distance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 16093.44}, Duration: 5000, Vertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 91.44}}, Completed: &model.Completed{ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f47", Distance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 16093.44}, Duration: 5000, Vertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 91.44}}}, &model.Activity{Uuid: "c6d91850-b65a-11ee-b827-325096b39f47", Date: "2024-01-01", Order: 4, Name: "Workout Name", Description: "Workout Description", Notes: "Notes", Type: &model.ActivityType{Id: 1, Name: "Run"}, TypeSubtypeList: []*model.ActivityTypeSubtype{&model.ActivityTypeSubtype{Id: 4, ActivityUuid: "c6d91850-b65a-11ee-b827-325096b39f47", ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, ActivitySubtype: &model.ActivitySubtype{Id: 1, SuperTypeId: 1, Name: "Long"}}, &model.ActivityTypeSubtype{Id: 5, ActivityUuid: "c6d91850-b65a-11ee-b827-325096b39f47", ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, ActivitySubtype: &model.ActivitySubtype{Id: 2, SuperTypeId: 1, Name: "Fartlek"}}, &model.ActivityTypeSubtype{Id: 6, ActivityUuid: "c6d91850-b65a-11ee-b827-325096b39f47", ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, ActivitySubtype: &model.ActivitySubtype{Id: 3, SuperTypeId: 1, Name: "Tempo"}}}, EquipmentList: []*model.ActivityEquipment{&model.ActivityEquipment{Id: 3, ActivityUuid: "c6d91850-b65a-11ee-b827-325096b39f47", Equipment: &model.Equipment{Id: 1, UserUuid: "d4e0fbfe-c945-11ee-b8e2-325096b39f47", EquipmentType: &model.EquipmentType{Id: 1, Name: "Shoes"}, Name: "Kickers 1", Brand: "Hoka", Model: "Clifton 5", Cost: 120, Size: "12.5", PurchaseDate: "2024-01-01", Notes: "Notes", Mileage: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 346013.95999999996}}, AssignedMileage: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 5}}, &model.ActivityEquipment{Id: 4, ActivityUuid: "c6d91850-b65a-11ee-b827-325096b39f47", Equipment: &model.Equipment{Id: 2, UserUuid: "d4e0fbfe-c945-11ee-b8e2-325096b39f47", EquipmentType: &model.EquipmentType{Id: 1, Name: "Shoes"}, Name: "Kickers 2", Brand: "Saucony", Model: "Kinvara 20", Cost: 75, Size: "13", PurchaseDate: "2023-05-04", Notes: "Notes", Mileage: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 8051.72}}, AssignedMileage: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 5}}}, Planned: &model.Planned{ActivityUuid: "c6d91850-b65a-11ee-b827-325096b39f47", Distance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 10000}, Duration: 5000, Vertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 300}}, Completed: &model.Completed{ActivityUuid: "c6d91850-b65a-11ee-b827-325096b39f47", Distance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 10000}, Duration: 5000, Vertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 300}}}}}, &model.ActivityList{DateObject: &dateutil.DateObject{DayOfWeek: "Tuesday", Date: "2024-01-02"}, ActivityList: []*model.Activity{}}, &model.ActivityList{DateObject: &dateutil.DateObject{DayOfWeek: "Wednesday", Date: "2024-01-03"}, ActivityList: []*model.Activity{}}, &model.ActivityList{DateObject: &dateutil.DateObject{DayOfWeek: "Thursday", Date: "2024-01-04"}, ActivityList: []*model.Activity{&model.Activity{Uuid: "c6d91bf2-b65a-11ee-a67e-325096b39f51", Date: "2024-01-04", Order: 1, Name: "Workout Name", Description: "Workout Description", Notes: "Notes", Type: &model.ActivityType{Id: 1, Name: "Run"}, TypeSubtypeList: []*model.ActivityTypeSubtype{}, EquipmentList: []*model.ActivityEquipment{}, Planned: &model.Planned{ActivityUuid: "c6d91bf2-b65a-11ee-a67e-325096b39f51", Distance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}}, Completed: &model.Completed{ActivityUuid: "c6d91bf2-b65a-11ee-a67e-325096b39f51", Distance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}}}}}, &model.ActivityList{DateObject: &dateutil.DateObject{DayOfWeek: "Friday", Date: "2024-01-05"}, ActivityList: []*model.Activity{&model.Activity{Uuid: "c6d91576-b65a-11ee-8546-325096b39f23", Date: "2024-01-05", Order: 1, Name: "Workout Name", Description: "Workout Description", Notes: "Notes", Type: &model.ActivityType{Id: 1, Name: "Run"}, TypeSubtypeList: []*model.ActivityTypeSubtype{}, EquipmentList: []*model.ActivityEquipment{}, Planned: &model.Planned{ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f23", Distance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}}, Completed: &model.Completed{ActivityUuid: "c6d91576-b65a-11ee-8546-325096b39f23", Distance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, Duration: 0, Vertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}}}}}}, Summary: &model.MicrocycleSummary{Totals: &model.Totals{TotalPlannedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 26093.440000000002}, TotalPlannedDuration: 10000, TotalPlannedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 391.44}, TotalCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 26093.440000000002}, TotalCompletedDuration: 10000, TotalCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 391.44}}, PreviousTotals: &model.Totals{TotalPlannedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, TotalPlannedDuration: 0, TotalPlannedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}, TotalCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, TotalCompletedDuration: 0, TotalCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}}, TotalsDifferences: &model.TotalsDifferences{DifferencePlannedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 26093.440000000002}, PercentPlannedDistance: utils.JsonFloat(math.NaN()), DifferencePlannedDuration: 10000, PercentPlannedDuration: utils.JsonFloat(math.NaN()), DifferencePlannedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 391.44}, PercentPlannedVertical: utils.JsonFloat(math.NaN()), DifferenceCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 26093.440000000002}, PercentCompletedDistance: utils.JsonFloat(math.NaN()), DifferenceCompletedDuration: 10000, PercentCompletedDuration: utils.JsonFloat(math.NaN()), DifferenceCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 391.44}, PercentCompletedVertical: utils.JsonFloat(math.NaN())}, TotalsByActivityType: []*model.TotalByActivityType{&model.TotalByActivityType{ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, TotalPlannedDistance: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 26093.440000000002}, TotalPlannedDuration: 10000, TotalPlannedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 391.44}, TotalCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 26093.440000000002}, TotalCompletedDuration: 10000, TotalCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 391.44}}}, TotalsByActivityTypeDifferences: []*model.TotalByActivityTypeDifferences{&model.TotalByActivityTypeDifferences{ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, DifferencePlannedDistance: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 26093.440000000002}, PercentPlannedDistance: utils.JsonFloat(math.NaN()), DifferencePlannedDuration: 10000, PercentPlannedDuration: utils.JsonFloat(math.NaN()), DifferencePlannedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 391.44}, PercentPlannedVertical: utils.JsonFloat(math.NaN()), DifferenceCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 26093.440000000002}, PercentCompletedDistance: utils.JsonFloat(math.NaN()), DifferenceCompletedDuration: 10000, PercentCompletedDuration: utils.JsonFloat(math.NaN()), DifferenceCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 391.44}, PercentCompletedVertical: utils.JsonFloat(math.NaN())}}, PreviousTotalsByActivityType: []*model.TotalByActivityType{&model.TotalByActivityType{ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, TotalPlannedDistance: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}, TotalPlannedDuration: 0, TotalPlannedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}, TotalCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}, TotalCompletedDuration: 0, TotalCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}}}, TotalsByActivityTypeAndDate: []*model.TotalByActivityTypeAndDate{&model.TotalByActivityTypeAndDate{ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, Date: &dateutil.DateObject{DayOfWeek: "", Date: "2024-01-01"}, TotalPlannedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 26093.440000000002}, TotalPlannedDuration: 10000, TotalPlannedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 391.44}, TotalCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 26093.440000000002}, TotalCompletedDuration: 10000, TotalCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 391.44}}, &model.TotalByActivityTypeAndDate{ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, Date: &dateutil.DateObject{DayOfWeek: "", Date: "2024-01-04"}, TotalPlannedDistance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 0}, TotalPlannedDuration: 0, TotalPlannedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}, TotalCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("km"), Length: 0}, TotalCompletedDuration: 0, TotalCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("m"), Length: 0}}, &model.TotalByActivityTypeAndDate{ActivityType: &model.ActivityType{Id: 1, Name: "Run"}, Date: &dateutil.DateObject{DayOfWeek: "", Date: "2024-01-05"}, TotalPlannedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, TotalPlannedDuration: 0, TotalPlannedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}, TotalCompletedDistance: &measurement.Measurement{Unit: measurement.Unit("mi"), Length: 0}, TotalCompletedDuration: 0, TotalCompletedVertical: &measurement.Measurement{Unit: measurement.Unit("ft"), Length: 0}}}}}

func TestIMicrocycleRepository_ReadMicrocycle(t *testing.T) {
	d := database.InitTestDB()
	type fields struct {
		DB database.DbOperations
	}
	type args struct {
		startDate     string
		endDate       string
		userUuid      string
		userUnitClass measurement.UnitClass
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *model.Microcycle
		wantErr bool
	}{
		{"mc 1", fields{d}, args{"2024-01-01", "2024-01-05", "d4e0fbfe-c945-11ee-b8e2-325096b39f47", measurement.Imperial}, mc, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			db := &IMicrocycleRepository{
				DB: tt.fields.DB,
			}
			got, err := db.ReadMicrocycle(tt.args.startDate, tt.args.endDate, tt.args.userUuid, tt.args.userUnitClass)
			if (err != nil) != tt.wantErr {
				t.Errorf("IMicrocycleRepository.ReadMicrocycle() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			// because of NaN's we can't directly check to see if they are equivalent. For now, I just check if all of the uuids are the same
			for i, cycle := range *tt.want.CycleActivities {
				for j, act := range cycle.ActivityList {
					l := *got.CycleActivities
					uuid := l[i].ActivityList[j].Uuid
					if act.Uuid != uuid {
						t.Errorf("IMicrocycleRepository.ReadMicrocycle() = %v, want %v", got, tt.want)
					}
				}
			}
		})
	}
}
